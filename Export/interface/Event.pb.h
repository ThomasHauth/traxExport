// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Event.proto

#ifndef PROTOBUF_Event_2eproto__INCLUDED
#define PROTOBUF_Event_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace PB_Event {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Event_2eproto();
void protobuf_AssignDesc_Event_2eproto();
void protobuf_ShutdownFile_Event_2eproto();

class PGlobalPoint;
class PHit;
class PEvent;
class PEventContainer;

enum DetectorType {
  BACKWARD = -1,
  BARREL = 0,
  FORWARD = 1
};
bool DetectorType_IsValid(int value);
const DetectorType DetectorType_MIN = BACKWARD;
const DetectorType DetectorType_MAX = FORWARD;
const int DetectorType_ARRAYSIZE = DetectorType_MAX + 1;

const ::google::protobuf::EnumDescriptor* DetectorType_descriptor();
inline const ::std::string& DetectorType_Name(DetectorType value) {
  return ::google::protobuf::internal::NameOfEnum(
    DetectorType_descriptor(), value);
}
inline bool DetectorType_Parse(
    const ::std::string& name, DetectorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<DetectorType>(
    DetectorType_descriptor(), name, value);
}
// ===================================================================

class PGlobalPoint : public ::google::protobuf::Message {
 public:
  PGlobalPoint();
  virtual ~PGlobalPoint();
  
  PGlobalPoint(const PGlobalPoint& from);
  
  inline PGlobalPoint& operator=(const PGlobalPoint& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PGlobalPoint& default_instance();
  
  void Swap(PGlobalPoint* other);
  
  // implements Message ----------------------------------------------
  
  PGlobalPoint* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PGlobalPoint& from);
  void MergeFrom(const PGlobalPoint& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required float x = 1;
  inline bool has_x() const;
  inline void clear_x();
  static const int kXFieldNumber = 1;
  inline float x() const;
  inline void set_x(float value);
  
  // required float y = 2;
  inline bool has_y() const;
  inline void clear_y();
  static const int kYFieldNumber = 2;
  inline float y() const;
  inline void set_y(float value);
  
  // required float z = 3;
  inline bool has_z() const;
  inline void clear_z();
  static const int kZFieldNumber = 3;
  inline float z() const;
  inline void set_z(float value);
  
  // @@protoc_insertion_point(class_scope:PB_Event.PGlobalPoint)
 private:
  inline void set_has_x();
  inline void clear_has_x();
  inline void set_has_y();
  inline void clear_has_y();
  inline void set_has_z();
  inline void clear_has_z();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  float x_;
  float y_;
  float z_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static PGlobalPoint* default_instance_;
};
// -------------------------------------------------------------------

class PHit : public ::google::protobuf::Message {
 public:
  PHit();
  virtual ~PHit();
  
  PHit(const PHit& from);
  
  inline PHit& operator=(const PHit& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PHit& default_instance();
  
  void Swap(PHit* other);
  
  // implements Message ----------------------------------------------
  
  PHit* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PHit& from);
  void MergeFrom(const PHit& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required .PB_Event.PGlobalPoint position = 1;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 1;
  inline const ::PB_Event::PGlobalPoint& position() const;
  inline ::PB_Event::PGlobalPoint* mutable_position();
  inline ::PB_Event::PGlobalPoint* release_position();
  
  // required .PB_Event.DetectorType detectorType = 2;
  inline bool has_detectortype() const;
  inline void clear_detectortype();
  static const int kDetectorTypeFieldNumber = 2;
  inline PB_Event::DetectorType detectortype() const;
  inline void set_detectortype(PB_Event::DetectorType value);
  
  // required uint64 layer = 3;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 3;
  inline ::google::protobuf::uint64 layer() const;
  inline void set_layer(::google::protobuf::uint64 value);
  
  // required uint64 detectorId = 4;
  inline bool has_detectorid() const;
  inline void clear_detectorid();
  static const int kDetectorIdFieldNumber = 4;
  inline ::google::protobuf::uint64 detectorid() const;
  inline void set_detectorid(::google::protobuf::uint64 value);
  
  // required uint64 hitId = 5;
  inline bool has_hitid() const;
  inline void clear_hitid();
  static const int kHitIdFieldNumber = 5;
  inline ::google::protobuf::uint64 hitid() const;
  inline void set_hitid(::google::protobuf::uint64 value);
  
  // optional uint64 simTrackID = 6;
  inline bool has_simtrackid() const;
  inline void clear_simtrackid();
  static const int kSimTrackIDFieldNumber = 6;
  inline ::google::protobuf::uint64 simtrackid() const;
  inline void set_simtrackid(::google::protobuf::uint64 value);
  
  // optional float simTrackPt = 7;
  inline bool has_simtrackpt() const;
  inline void clear_simtrackpt();
  static const int kSimTrackPtFieldNumber = 7;
  inline float simtrackpt() const;
  inline void set_simtrackpt(float value);
  
  // @@protoc_insertion_point(class_scope:PB_Event.PHit)
 private:
  inline void set_has_position();
  inline void clear_has_position();
  inline void set_has_detectortype();
  inline void clear_has_detectortype();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_detectorid();
  inline void clear_has_detectorid();
  inline void set_has_hitid();
  inline void clear_has_hitid();
  inline void set_has_simtrackid();
  inline void clear_has_simtrackid();
  inline void set_has_simtrackpt();
  inline void clear_has_simtrackpt();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::PB_Event::PGlobalPoint* position_;
  ::google::protobuf::uint64 layer_;
  ::google::protobuf::uint64 detectorid_;
  int detectortype_;
  float simtrackpt_;
  ::google::protobuf::uint64 hitid_;
  ::google::protobuf::uint64 simtrackid_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static PHit* default_instance_;
};
// -------------------------------------------------------------------

class PEvent : public ::google::protobuf::Message {
 public:
  PEvent();
  virtual ~PEvent();
  
  PEvent(const PEvent& from);
  
  inline PEvent& operator=(const PEvent& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PEvent& default_instance();
  
  void Swap(PEvent* other);
  
  // implements Message ----------------------------------------------
  
  PEvent* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PEvent& from);
  void MergeFrom(const PEvent& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required uint64 runNumber = 1;
  inline bool has_runnumber() const;
  inline void clear_runnumber();
  static const int kRunNumberFieldNumber = 1;
  inline ::google::protobuf::uint64 runnumber() const;
  inline void set_runnumber(::google::protobuf::uint64 value);
  
  // required uint64 lumiSection = 2;
  inline bool has_lumisection() const;
  inline void clear_lumisection();
  static const int kLumiSectionFieldNumber = 2;
  inline ::google::protobuf::uint64 lumisection() const;
  inline void set_lumisection(::google::protobuf::uint64 value);
  
  // required uint64 eventNumber = 3;
  inline bool has_eventnumber() const;
  inline void clear_eventnumber();
  static const int kEventNumberFieldNumber = 3;
  inline ::google::protobuf::uint64 eventnumber() const;
  inline void set_eventnumber(::google::protobuf::uint64 value);
  
  // repeated .PB_Event.PHit hits = 4;
  inline int hits_size() const;
  inline void clear_hits();
  static const int kHitsFieldNumber = 4;
  inline const ::PB_Event::PHit& hits(int index) const;
  inline ::PB_Event::PHit* mutable_hits(int index);
  inline ::PB_Event::PHit* add_hits();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_Event::PHit >&
      hits() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_Event::PHit >*
      mutable_hits();
  
  // @@protoc_insertion_point(class_scope:PB_Event.PEvent)
 private:
  inline void set_has_runnumber();
  inline void clear_has_runnumber();
  inline void set_has_lumisection();
  inline void clear_has_lumisection();
  inline void set_has_eventnumber();
  inline void clear_has_eventnumber();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::uint64 runnumber_;
  ::google::protobuf::uint64 lumisection_;
  ::google::protobuf::uint64 eventnumber_;
  ::google::protobuf::RepeatedPtrField< ::PB_Event::PHit > hits_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static PEvent* default_instance_;
};
// -------------------------------------------------------------------

class PEventContainer : public ::google::protobuf::Message {
 public:
  PEventContainer();
  virtual ~PEventContainer();
  
  PEventContainer(const PEventContainer& from);
  
  inline PEventContainer& operator=(const PEventContainer& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const PEventContainer& default_instance();
  
  void Swap(PEventContainer* other);
  
  // implements Message ----------------------------------------------
  
  PEventContainer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PEventContainer& from);
  void MergeFrom(const PEventContainer& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .PB_Event.PEvent events = 1;
  inline int events_size() const;
  inline void clear_events();
  static const int kEventsFieldNumber = 1;
  inline const ::PB_Event::PEvent& events(int index) const;
  inline ::PB_Event::PEvent* mutable_events(int index);
  inline ::PB_Event::PEvent* add_events();
  inline const ::google::protobuf::RepeatedPtrField< ::PB_Event::PEvent >&
      events() const;
  inline ::google::protobuf::RepeatedPtrField< ::PB_Event::PEvent >*
      mutable_events();
  
  // @@protoc_insertion_point(class_scope:PB_Event.PEventContainer)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::PB_Event::PEvent > events_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_Event_2eproto();
  friend void protobuf_AssignDesc_Event_2eproto();
  friend void protobuf_ShutdownFile_Event_2eproto();
  
  void InitAsDefaultInstance();
  static PEventContainer* default_instance_;
};
// ===================================================================


// ===================================================================

// PGlobalPoint

// required float x = 1;
inline bool PGlobalPoint::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PGlobalPoint::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PGlobalPoint::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PGlobalPoint::clear_x() {
  x_ = 0;
  clear_has_x();
}
inline float PGlobalPoint::x() const {
  return x_;
}
inline void PGlobalPoint::set_x(float value) {
  set_has_x();
  x_ = value;
}

// required float y = 2;
inline bool PGlobalPoint::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PGlobalPoint::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PGlobalPoint::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PGlobalPoint::clear_y() {
  y_ = 0;
  clear_has_y();
}
inline float PGlobalPoint::y() const {
  return y_;
}
inline void PGlobalPoint::set_y(float value) {
  set_has_y();
  y_ = value;
}

// required float z = 3;
inline bool PGlobalPoint::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PGlobalPoint::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PGlobalPoint::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PGlobalPoint::clear_z() {
  z_ = 0;
  clear_has_z();
}
inline float PGlobalPoint::z() const {
  return z_;
}
inline void PGlobalPoint::set_z(float value) {
  set_has_z();
  z_ = value;
}

// -------------------------------------------------------------------

// PHit

// required .PB_Event.PGlobalPoint position = 1;
inline bool PHit::has_position() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PHit::set_has_position() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PHit::clear_has_position() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PHit::clear_position() {
  if (position_ != NULL) position_->::PB_Event::PGlobalPoint::Clear();
  clear_has_position();
}
inline const ::PB_Event::PGlobalPoint& PHit::position() const {
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
inline ::PB_Event::PGlobalPoint* PHit::mutable_position() {
  set_has_position();
  if (position_ == NULL) position_ = new ::PB_Event::PGlobalPoint;
  return position_;
}
inline ::PB_Event::PGlobalPoint* PHit::release_position() {
  clear_has_position();
  ::PB_Event::PGlobalPoint* temp = position_;
  position_ = NULL;
  return temp;
}

// required .PB_Event.DetectorType detectorType = 2;
inline bool PHit::has_detectortype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PHit::set_has_detectortype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PHit::clear_has_detectortype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PHit::clear_detectortype() {
  detectortype_ = -1;
  clear_has_detectortype();
}
inline PB_Event::DetectorType PHit::detectortype() const {
  return static_cast< PB_Event::DetectorType >(detectortype_);
}
inline void PHit::set_detectortype(PB_Event::DetectorType value) {
  GOOGLE_DCHECK(PB_Event::DetectorType_IsValid(value));
  set_has_detectortype();
  detectortype_ = value;
}

// required uint64 layer = 3;
inline bool PHit::has_layer() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PHit::set_has_layer() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PHit::clear_has_layer() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PHit::clear_layer() {
  layer_ = GOOGLE_ULONGLONG(0);
  clear_has_layer();
}
inline ::google::protobuf::uint64 PHit::layer() const {
  return layer_;
}
inline void PHit::set_layer(::google::protobuf::uint64 value) {
  set_has_layer();
  layer_ = value;
}

// required uint64 detectorId = 4;
inline bool PHit::has_detectorid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PHit::set_has_detectorid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PHit::clear_has_detectorid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PHit::clear_detectorid() {
  detectorid_ = GOOGLE_ULONGLONG(0);
  clear_has_detectorid();
}
inline ::google::protobuf::uint64 PHit::detectorid() const {
  return detectorid_;
}
inline void PHit::set_detectorid(::google::protobuf::uint64 value) {
  set_has_detectorid();
  detectorid_ = value;
}

// required uint64 hitId = 5;
inline bool PHit::has_hitid() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PHit::set_has_hitid() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PHit::clear_has_hitid() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PHit::clear_hitid() {
  hitid_ = GOOGLE_ULONGLONG(0);
  clear_has_hitid();
}
inline ::google::protobuf::uint64 PHit::hitid() const {
  return hitid_;
}
inline void PHit::set_hitid(::google::protobuf::uint64 value) {
  set_has_hitid();
  hitid_ = value;
}

// optional uint64 simTrackID = 6;
inline bool PHit::has_simtrackid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PHit::set_has_simtrackid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PHit::clear_has_simtrackid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PHit::clear_simtrackid() {
  simtrackid_ = GOOGLE_ULONGLONG(0);
  clear_has_simtrackid();
}
inline ::google::protobuf::uint64 PHit::simtrackid() const {
  return simtrackid_;
}
inline void PHit::set_simtrackid(::google::protobuf::uint64 value) {
  set_has_simtrackid();
  simtrackid_ = value;
}

// optional float simTrackPt = 7;
inline bool PHit::has_simtrackpt() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PHit::set_has_simtrackpt() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PHit::clear_has_simtrackpt() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PHit::clear_simtrackpt() {
  simtrackpt_ = 0;
  clear_has_simtrackpt();
}
inline float PHit::simtrackpt() const {
  return simtrackpt_;
}
inline void PHit::set_simtrackpt(float value) {
  set_has_simtrackpt();
  simtrackpt_ = value;
}

// -------------------------------------------------------------------

// PEvent

// required uint64 runNumber = 1;
inline bool PEvent::has_runnumber() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PEvent::set_has_runnumber() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PEvent::clear_has_runnumber() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PEvent::clear_runnumber() {
  runnumber_ = GOOGLE_ULONGLONG(0);
  clear_has_runnumber();
}
inline ::google::protobuf::uint64 PEvent::runnumber() const {
  return runnumber_;
}
inline void PEvent::set_runnumber(::google::protobuf::uint64 value) {
  set_has_runnumber();
  runnumber_ = value;
}

// required uint64 lumiSection = 2;
inline bool PEvent::has_lumisection() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PEvent::set_has_lumisection() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PEvent::clear_has_lumisection() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PEvent::clear_lumisection() {
  lumisection_ = GOOGLE_ULONGLONG(0);
  clear_has_lumisection();
}
inline ::google::protobuf::uint64 PEvent::lumisection() const {
  return lumisection_;
}
inline void PEvent::set_lumisection(::google::protobuf::uint64 value) {
  set_has_lumisection();
  lumisection_ = value;
}

// required uint64 eventNumber = 3;
inline bool PEvent::has_eventnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PEvent::set_has_eventnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PEvent::clear_has_eventnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PEvent::clear_eventnumber() {
  eventnumber_ = GOOGLE_ULONGLONG(0);
  clear_has_eventnumber();
}
inline ::google::protobuf::uint64 PEvent::eventnumber() const {
  return eventnumber_;
}
inline void PEvent::set_eventnumber(::google::protobuf::uint64 value) {
  set_has_eventnumber();
  eventnumber_ = value;
}

// repeated .PB_Event.PHit hits = 4;
inline int PEvent::hits_size() const {
  return hits_.size();
}
inline void PEvent::clear_hits() {
  hits_.Clear();
}
inline const ::PB_Event::PHit& PEvent::hits(int index) const {
  return hits_.Get(index);
}
inline ::PB_Event::PHit* PEvent::mutable_hits(int index) {
  return hits_.Mutable(index);
}
inline ::PB_Event::PHit* PEvent::add_hits() {
  return hits_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_Event::PHit >&
PEvent::hits() const {
  return hits_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_Event::PHit >*
PEvent::mutable_hits() {
  return &hits_;
}

// -------------------------------------------------------------------

// PEventContainer

// repeated .PB_Event.PEvent events = 1;
inline int PEventContainer::events_size() const {
  return events_.size();
}
inline void PEventContainer::clear_events() {
  events_.Clear();
}
inline const ::PB_Event::PEvent& PEventContainer::events(int index) const {
  return events_.Get(index);
}
inline ::PB_Event::PEvent* PEventContainer::mutable_events(int index) {
  return events_.Mutable(index);
}
inline ::PB_Event::PEvent* PEventContainer::add_events() {
  return events_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PB_Event::PEvent >&
PEventContainer::events() const {
  return events_;
}
inline ::google::protobuf::RepeatedPtrField< ::PB_Event::PEvent >*
PEventContainer::mutable_events() {
  return &events_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB_Event

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< PB_Event::DetectorType>() {
  return PB_Event::DetectorType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Event_2eproto__INCLUDED
