// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "traxExport/Export/interface/Event.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PB_Event {

namespace {

const ::google::protobuf::Descriptor* PGlobalPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PGlobalPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* PHit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PHit_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEvent_reflection_ = NULL;
const ::google::protobuf::Descriptor* PEventContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PEventContainer_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DetectorType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Event_2eproto() {
  protobuf_AddDesc_Event_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Event.proto");
  GOOGLE_CHECK(file != NULL);
  PGlobalPoint_descriptor_ = file->message_type(0);
  static const int PGlobalPoint_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGlobalPoint, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGlobalPoint, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGlobalPoint, z_),
  };
  PGlobalPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PGlobalPoint_descriptor_,
      PGlobalPoint::default_instance_,
      PGlobalPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGlobalPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PGlobalPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PGlobalPoint));
  PHit_descriptor_ = file->message_type(1);
  static const int PHit_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, detectortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, detectorid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, hitid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, simtrackid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, simtrackpt_),
  };
  PHit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PHit_descriptor_,
      PHit::default_instance_,
      PHit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PHit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PHit));
  PEvent_descriptor_ = file->message_type(2);
  static const int PEvent_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEvent, runnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEvent, lumisection_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEvent, eventnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEvent, hits_),
  };
  PEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEvent_descriptor_,
      PEvent::default_instance_,
      PEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEvent));
  PEventContainer_descriptor_ = file->message_type(3);
  static const int PEventContainer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEventContainer, events_),
  };
  PEventContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PEventContainer_descriptor_,
      PEventContainer::default_instance_,
      PEventContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEventContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PEventContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PEventContainer));
  DetectorType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Event_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PGlobalPoint_descriptor_, &PGlobalPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PHit_descriptor_, &PHit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEvent_descriptor_, &PEvent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PEventContainer_descriptor_, &PEventContainer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Event_2eproto() {
  delete PGlobalPoint::default_instance_;
  delete PGlobalPoint_reflection_;
  delete PHit::default_instance_;
  delete PHit_reflection_;
  delete PEvent::default_instance_;
  delete PEvent_reflection_;
  delete PEventContainer::default_instance_;
  delete PEventContainer_reflection_;
}

void protobuf_AddDesc_Event_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013Event.proto\022\010PB_Event\"/\n\014PGlobalPoint\022"
    "\t\n\001x\030\001 \002(\002\022\t\n\001y\030\002 \002(\002\022\t\n\001z\030\003 \002(\002\"\270\001\n\004PHi"
    "t\022(\n\010position\030\001 \002(\0132\026.PB_Event.PGlobalPo"
    "int\022,\n\014detectorType\030\002 \002(\0162\026.PB_Event.Det"
    "ectorType\022\r\n\005layer\030\003 \002(\004\022\022\n\ndetectorId\030\004"
    " \002(\004\022\r\n\005hitId\030\005 \002(\004\022\022\n\nsimTrackID\030\006 \001(\004\022"
    "\022\n\nsimTrackPt\030\007 \001(\002\"c\n\006PEvent\022\021\n\trunNumb"
    "er\030\001 \002(\004\022\023\n\013lumiSection\030\002 \002(\004\022\023\n\013eventNu"
    "mber\030\003 \002(\004\022\034\n\004hits\030\004 \003(\0132\016.PB_Event.PHit"
    "\"3\n\017PEventContainer\022 \n\006events\030\001 \003(\0132\020.PB"
    "_Event.PEvent*>\n\014DetectorType\022\025\n\010BACKWAR"
    "D\020\377\377\377\377\377\377\377\377\377\001\022\n\n\006BARREL\020\000\022\013\n\007FORWARD\020\001", 477);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Event.proto", &protobuf_RegisterTypes);
  PGlobalPoint::default_instance_ = new PGlobalPoint();
  PHit::default_instance_ = new PHit();
  PEvent::default_instance_ = new PEvent();
  PEventContainer::default_instance_ = new PEventContainer();
  PGlobalPoint::default_instance_->InitAsDefaultInstance();
  PHit::default_instance_->InitAsDefaultInstance();
  PEvent::default_instance_->InitAsDefaultInstance();
  PEventContainer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Event_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Event_2eproto {
  StaticDescriptorInitializer_Event_2eproto() {
    protobuf_AddDesc_Event_2eproto();
  }
} static_descriptor_initializer_Event_2eproto_;

const ::google::protobuf::EnumDescriptor* DetectorType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DetectorType_descriptor_;
}
bool DetectorType_IsValid(int value) {
  switch(value) {
    case -1:
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#ifndef _MSC_VER
const int PGlobalPoint::kXFieldNumber;
const int PGlobalPoint::kYFieldNumber;
const int PGlobalPoint::kZFieldNumber;
#endif  // !_MSC_VER

PGlobalPoint::PGlobalPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PGlobalPoint::InitAsDefaultInstance() {
}

PGlobalPoint::PGlobalPoint(const PGlobalPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PGlobalPoint::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PGlobalPoint::~PGlobalPoint() {
  SharedDtor();
}

void PGlobalPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PGlobalPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PGlobalPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PGlobalPoint_descriptor_;
}

const PGlobalPoint& PGlobalPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

PGlobalPoint* PGlobalPoint::default_instance_ = NULL;

PGlobalPoint* PGlobalPoint::New() const {
  return new PGlobalPoint;
}

void PGlobalPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    x_ = 0;
    y_ = 0;
    z_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PGlobalPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float x = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_y;
        break;
      }
      
      // required float y = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_z;
        break;
      }
      
      // required float z = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PGlobalPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float x = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }
  
  // required float y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }
  
  // required float z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PGlobalPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float x = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }
  
  // required float y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }
  
  // required float z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PGlobalPoint::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float x = 1;
    if (has_x()) {
      total_size += 1 + 4;
    }
    
    // required float y = 2;
    if (has_y()) {
      total_size += 1 + 4;
    }
    
    // required float z = 3;
    if (has_z()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PGlobalPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PGlobalPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PGlobalPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PGlobalPoint::MergeFrom(const PGlobalPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PGlobalPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PGlobalPoint::CopyFrom(const PGlobalPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PGlobalPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void PGlobalPoint::Swap(PGlobalPoint* other) {
  if (other != this) {
    std::swap(x_, other->x_);
    std::swap(y_, other->y_);
    std::swap(z_, other->z_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PGlobalPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PGlobalPoint_descriptor_;
  metadata.reflection = PGlobalPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PHit::kPositionFieldNumber;
const int PHit::kDetectorTypeFieldNumber;
const int PHit::kLayerFieldNumber;
const int PHit::kDetectorIdFieldNumber;
const int PHit::kHitIdFieldNumber;
const int PHit::kSimTrackIDFieldNumber;
const int PHit::kSimTrackPtFieldNumber;
#endif  // !_MSC_VER

PHit::PHit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PHit::InitAsDefaultInstance() {
  position_ = const_cast< ::PB_Event::PGlobalPoint*>(&::PB_Event::PGlobalPoint::default_instance());
}

PHit::PHit(const PHit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PHit::SharedCtor() {
  _cached_size_ = 0;
  position_ = NULL;
  detectortype_ = -1;
  layer_ = GOOGLE_ULONGLONG(0);
  detectorid_ = GOOGLE_ULONGLONG(0);
  hitid_ = GOOGLE_ULONGLONG(0);
  simtrackid_ = GOOGLE_ULONGLONG(0);
  simtrackpt_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PHit::~PHit() {
  SharedDtor();
}

void PHit::SharedDtor() {
  if (this != default_instance_) {
    delete position_;
  }
}

void PHit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PHit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PHit_descriptor_;
}

const PHit& PHit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

PHit* PHit::default_instance_ = NULL;

PHit* PHit::New() const {
  return new PHit;
}

void PHit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_position()) {
      if (position_ != NULL) position_->::PB_Event::PGlobalPoint::Clear();
    }
    detectortype_ = -1;
    layer_ = GOOGLE_ULONGLONG(0);
    detectorid_ = GOOGLE_ULONGLONG(0);
    hitid_ = GOOGLE_ULONGLONG(0);
    simtrackid_ = GOOGLE_ULONGLONG(0);
    simtrackpt_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PHit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PB_Event.PGlobalPoint position = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_detectorType;
        break;
      }
      
      // required .PB_Event.DetectorType detectorType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detectorType:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (PB_Event::DetectorType_IsValid(value)) {
            set_detectortype(static_cast< PB_Event::DetectorType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_layer;
        break;
      }
      
      // required uint64 layer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_detectorId;
        break;
      }
      
      // required uint64 detectorId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_detectorId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &detectorid_)));
          set_has_detectorid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hitId;
        break;
      }
      
      // required uint64 hitId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &hitid_)));
          set_has_hitid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_simTrackID;
        break;
      }
      
      // optional uint64 simTrackID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_simTrackID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &simtrackid_)));
          set_has_simtrackid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(61)) goto parse_simTrackPt;
        break;
      }
      
      // optional float simTrackPt = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_simTrackPt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &simtrackpt_)));
          set_has_simtrackpt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PHit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PB_Event.PGlobalPoint position = 1;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->position(), output);
  }
  
  // required .PB_Event.DetectorType detectorType = 2;
  if (has_detectortype()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->detectortype(), output);
  }
  
  // required uint64 layer = 3;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->layer(), output);
  }
  
  // required uint64 detectorId = 4;
  if (has_detectorid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->detectorid(), output);
  }
  
  // required uint64 hitId = 5;
  if (has_hitid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->hitid(), output);
  }
  
  // optional uint64 simTrackID = 6;
  if (has_simtrackid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(6, this->simtrackid(), output);
  }
  
  // optional float simTrackPt = 7;
  if (has_simtrackpt()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(7, this->simtrackpt(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PHit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PB_Event.PGlobalPoint position = 1;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->position(), target);
  }
  
  // required .PB_Event.DetectorType detectorType = 2;
  if (has_detectortype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->detectortype(), target);
  }
  
  // required uint64 layer = 3;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->layer(), target);
  }
  
  // required uint64 detectorId = 4;
  if (has_detectorid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(4, this->detectorid(), target);
  }
  
  // required uint64 hitId = 5;
  if (has_hitid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->hitid(), target);
  }
  
  // optional uint64 simTrackID = 6;
  if (has_simtrackid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(6, this->simtrackid(), target);
  }
  
  // optional float simTrackPt = 7;
  if (has_simtrackpt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(7, this->simtrackpt(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PHit::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PB_Event.PGlobalPoint position = 1;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->position());
    }
    
    // required .PB_Event.DetectorType detectorType = 2;
    if (has_detectortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->detectortype());
    }
    
    // required uint64 layer = 3;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->layer());
    }
    
    // required uint64 detectorId = 4;
    if (has_detectorid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->detectorid());
    }
    
    // required uint64 hitId = 5;
    if (has_hitid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->hitid());
    }
    
    // optional uint64 simTrackID = 6;
    if (has_simtrackid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->simtrackid());
    }
    
    // optional float simTrackPt = 7;
    if (has_simtrackpt()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PHit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PHit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PHit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PHit::MergeFrom(const PHit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_position()) {
      mutable_position()->::PB_Event::PGlobalPoint::MergeFrom(from.position());
    }
    if (from.has_detectortype()) {
      set_detectortype(from.detectortype());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_detectorid()) {
      set_detectorid(from.detectorid());
    }
    if (from.has_hitid()) {
      set_hitid(from.hitid());
    }
    if (from.has_simtrackid()) {
      set_simtrackid(from.simtrackid());
    }
    if (from.has_simtrackpt()) {
      set_simtrackpt(from.simtrackpt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PHit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PHit::CopyFrom(const PHit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PHit::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;
  
  if (has_position()) {
    if (!this->position().IsInitialized()) return false;
  }
  return true;
}

void PHit::Swap(PHit* other) {
  if (other != this) {
    std::swap(position_, other->position_);
    std::swap(detectortype_, other->detectortype_);
    std::swap(layer_, other->layer_);
    std::swap(detectorid_, other->detectorid_);
    std::swap(hitid_, other->hitid_);
    std::swap(simtrackid_, other->simtrackid_);
    std::swap(simtrackpt_, other->simtrackpt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PHit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PHit_descriptor_;
  metadata.reflection = PHit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PEvent::kRunNumberFieldNumber;
const int PEvent::kLumiSectionFieldNumber;
const int PEvent::kEventNumberFieldNumber;
const int PEvent::kHitsFieldNumber;
#endif  // !_MSC_VER

PEvent::PEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PEvent::InitAsDefaultInstance() {
}

PEvent::PEvent(const PEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PEvent::SharedCtor() {
  _cached_size_ = 0;
  runnumber_ = GOOGLE_ULONGLONG(0);
  lumisection_ = GOOGLE_ULONGLONG(0);
  eventnumber_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEvent::~PEvent() {
  SharedDtor();
}

void PEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEvent_descriptor_;
}

const PEvent& PEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

PEvent* PEvent::default_instance_ = NULL;

PEvent* PEvent::New() const {
  return new PEvent;
}

void PEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    runnumber_ = GOOGLE_ULONGLONG(0);
    lumisection_ = GOOGLE_ULONGLONG(0);
    eventnumber_ = GOOGLE_ULONGLONG(0);
  }
  hits_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 runNumber = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &runnumber_)));
          set_has_runnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lumiSection;
        break;
      }
      
      // required uint64 lumiSection = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lumiSection:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lumisection_)));
          set_has_lumisection();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_eventNumber;
        break;
      }
      
      // required uint64 eventNumber = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eventNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &eventnumber_)));
          set_has_eventnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hits;
        break;
      }
      
      // repeated .PB_Event.PHit hits = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_hits:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_hits()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_hits;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 runNumber = 1;
  if (has_runnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->runnumber(), output);
  }
  
  // required uint64 lumiSection = 2;
  if (has_lumisection()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lumisection(), output);
  }
  
  // required uint64 eventNumber = 3;
  if (has_eventnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->eventnumber(), output);
  }
  
  // repeated .PB_Event.PHit hits = 4;
  for (int i = 0; i < this->hits_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->hits(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 runNumber = 1;
  if (has_runnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->runnumber(), target);
  }
  
  // required uint64 lumiSection = 2;
  if (has_lumisection()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lumisection(), target);
  }
  
  // required uint64 eventNumber = 3;
  if (has_eventnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(3, this->eventnumber(), target);
  }
  
  // repeated .PB_Event.PHit hits = 4;
  for (int i = 0; i < this->hits_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->hits(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PEvent::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 runNumber = 1;
    if (has_runnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->runnumber());
    }
    
    // required uint64 lumiSection = 2;
    if (has_lumisection()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lumisection());
    }
    
    // required uint64 eventNumber = 3;
    if (has_eventnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->eventnumber());
    }
    
  }
  // repeated .PB_Event.PHit hits = 4;
  total_size += 1 * this->hits_size();
  for (int i = 0; i < this->hits_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->hits(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEvent::MergeFrom(const PEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  hits_.MergeFrom(from.hits_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_runnumber()) {
      set_runnumber(from.runnumber());
    }
    if (from.has_lumisection()) {
      set_lumisection(from.lumisection());
    }
    if (from.has_eventnumber()) {
      set_eventnumber(from.eventnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEvent::CopyFrom(const PEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  for (int i = 0; i < hits_size(); i++) {
    if (!this->hits(i).IsInitialized()) return false;
  }
  return true;
}

void PEvent::Swap(PEvent* other) {
  if (other != this) {
    std::swap(runnumber_, other->runnumber_);
    std::swap(lumisection_, other->lumisection_);
    std::swap(eventnumber_, other->eventnumber_);
    hits_.Swap(&other->hits_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEvent_descriptor_;
  metadata.reflection = PEvent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PEventContainer::kEventsFieldNumber;
#endif  // !_MSC_VER

PEventContainer::PEventContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PEventContainer::InitAsDefaultInstance() {
}

PEventContainer::PEventContainer(const PEventContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PEventContainer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PEventContainer::~PEventContainer() {
  SharedDtor();
}

void PEventContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PEventContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PEventContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PEventContainer_descriptor_;
}

const PEventContainer& PEventContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Event_2eproto();  return *default_instance_;
}

PEventContainer* PEventContainer::default_instance_ = NULL;

PEventContainer* PEventContainer::New() const {
  return new PEventContainer;
}

void PEventContainer::Clear() {
  events_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PEventContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PB_Event.PEvent events = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_events:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_events()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_events;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PEventContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PB_Event.PEvent events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->events(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PEventContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PB_Event.PEvent events = 1;
  for (int i = 0; i < this->events_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->events(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PEventContainer::ByteSize() const {
  int total_size = 0;
  
  // repeated .PB_Event.PEvent events = 1;
  total_size += 1 * this->events_size();
  for (int i = 0; i < this->events_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->events(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PEventContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PEventContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PEventContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PEventContainer::MergeFrom(const PEventContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  events_.MergeFrom(from.events_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PEventContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PEventContainer::CopyFrom(const PEventContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PEventContainer::IsInitialized() const {
  
  for (int i = 0; i < events_size(); i++) {
    if (!this->events(i).IsInitialized()) return false;
  }
  return true;
}

void PEventContainer::Swap(PEventContainer* other) {
  if (other != this) {
    events_.Swap(&other->events_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PEventContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PEventContainer_descriptor_;
  metadata.reflection = PEventContainer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PB_Event

// @@protoc_insertion_point(global_scope)
